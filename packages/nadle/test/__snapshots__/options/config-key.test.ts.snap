// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`--config-key > should have no effect if not specified any value 1`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/main
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key
---------- Stdout ------------
[log] {
  "cache": true,
  "footer": false,
  "summary": false,
  "parallel": false,
  "logLevel": "log",
  "cleanCache": false,
  "showConfig": true,
  "excludedTasks": [],
  "isWorkerThread": false,
  "tasks": [],
  "maxWorkers": 1,
  "configKey": "",
  "list": false,
  "dryRun": false,
  "stacktrace": false,
  "listWorkspaces": false,
  "project": {
    "rootWorkspace": {
      "id": "root",
      "label": "",
      "packageJson": {
        "name": "@nadle/internal-nadle-test-fixtures-main",
        "type": "module",
        "private": true,
        "dependencies": {
          "nadle": "workspace:*"
        },
        "nadle": {
          "root": true
        }
      },
      "absolutePath": "/ROOT/test/__fixtures__/main",
      "dependencies": [],
      "relativePath": ".",
      "configFilePath": "/ROOT/test/__fixtures__/main/nadle.config.ts"
    },
    "workspaces": [],
    "packageManager": "npm",
    "currentWorkspaceId": "root"
  },
  "cacheDir": "/ROOT/test/__fixtures__/main/.nadle",
  "minWorkers": 1
}
`;

exports[`--config-key > should print undefined if config key does not exist 1`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/main
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key notFound
---------- Stdout ------------
[log] undefined
`;

exports[`--config-key > should use the specified config key and show correct config 1`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/main
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key project
---------- Stdout ------------
[log] {
  "rootWorkspace": {
    "id": "root",
    "label": "",
    "packageJson": {
      "name": "@nadle/internal-nadle-test-fixtures-main",
      "type": "module",
      "private": true,
      "dependencies": {
        "nadle": "workspace:*"
      },
      "nadle": {
        "root": true
      }
    },
    "absolutePath": "/ROOT/test/__fixtures__/main",
    "dependencies": [],
    "relativePath": ".",
    "configFilePath": "/ROOT/test/__fixtures__/main/nadle.config.ts"
  },
  "workspaces": [],
  "packageManager": "npm",
  "currentWorkspaceId": "root"
}
`;

exports[`--config-key > should work with nested key 1`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/pnpm-workspaces
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key project.rootWorkspace.absolutePath
---------- Stdout ------------
[log] "/ROOT/test/__fixtures__/pnpm-workspaces"
`;

exports[`--config-key > should work with nested key 2`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/pnpm-workspaces
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key project.workspaces[1]
---------- Stdout ------------
[log] {
  "id": "frontend",
  "label": "frontend",
  "absolutePath": "/ROOT/test/__fixtures__/pnpm-workspaces/frontend",
  "relativePath": "frontend",
  "dependencies": [
    "shared:api",
    "shared:types"
  ],
  "configFilePath": "/ROOT/test/__fixtures__/pnpm-workspaces/frontend/nadle.config.ts",
  "packageJson": {
    "name": "@nadle/internal-nadle-test-fixtures-pnpm-workspaces-frontend",
    "dependencies": {
      "@nadle/internal-nadle-test-fixtures-pnpm-workspaces-shared-api": "workspace:*",
      "@nadle/internal-nadle-test-fixtures-pnpm-workspaces-shared-types": "workspace:*"
    }
  }
}
`;

exports[`--config-key > should work with nested key 3`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/pnpm-workspaces
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key project.workspaces[1].id
---------- Stdout ------------
[log] "frontend"
`;

exports[`--config-key > should work with nested key 4`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/pnpm-workspaces
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer --show-config --config-key project.workspaces.1.id
---------- Stdout ------------
[log] "frontend"
`;

exports[`--config-key > should work with nested key 5`] = `
---------- Context -----------
Working Directory: /ROOT/test/__fixtures__/pnpm-workspaces
Command: /ROOT/nadle.mjs --max-workers 1 --no-footer build --show-config --config-key tasks[0].taskId
---------- Stdout ------------
[log] "root:build"
`;
